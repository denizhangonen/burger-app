{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","validationError","ValidationError","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_Users_denizhangonen_Documents_Development_Projects_gitTestBurger_burger_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","swithcAuthModeHAndler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_10__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_11__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.d79e1778.chunk.js","sourcesContent":["import React from \"react\";\n\nimport classes from \"./Input.css\";\n\nconst input = props => {\n  let inputElement = null;\n  let inputClasses = [classes.InputElement];\n\n  if(props.invalid && props.shouldValidate && props.touched){\n      inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n        />\n      );\n  }\n\n  let validationError = null;\n  if(props.invalid && props.touched){\n      validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>\n  }\n\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\",\"ValidationError\":\"Input__ValidationError__1ElSg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\"};","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/index\";\n\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport classes from \"./Auth.css\";\n\nimport { updateObject, checkValidity } from \"../../shared/utility\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email Adress\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      },\n      isSignup: true\n    }\n  };\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true\n      })\n    });\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup\n    );\n  };\n\n  swithcAuthModeHAndler = () => {\n    this.setState(prevState => {\n      return { isSignup: !prevState.isSignup };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={event => this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n\n    const authRedirect = this.props.isAuthenticated ? (\n      <Redirect to={this.props.authRedirectPath} />\n    ) : null;\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">Submit</Button>\n        </form>\n        <Button btnType=\"Danger\" clicked={this.swithcAuthModeHAndler}>\n          Switch to {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Auth);\n"],"sourceRoot":""}